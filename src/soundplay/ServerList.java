/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package soundplay;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author Pascal Lis
 */
public class ServerList extends javax.swing.JDialog {

    Pinger pinger;
    final int PING_PORT = 3001;
    SoundWindow parent;
    /**
     * Creates new form NewJDialog
     */
    public ServerList(java.awt.Frame parentFrame, boolean modal) {
        super(parentFrame, modal);
        parent = (SoundWindow) parentFrame;
        try {
            pinger = new Pinger(PING_PORT);
            pinger.start();
        } catch (SocketException ex) {
            Logger.getLogger(ServerList.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        servers = new javax.swing.JList();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        servers.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return pinger.addressList.size(); }
            public Object getElementAt(int i) { return new String ((String)pinger.addressList.get(i).ip.getHostAddress() + ":" + String.valueOf(pinger.addressList.get(i).port)); }
        });
        jScrollPane1.setViewportView(servers);
        servers.setSelectedIndex(0);

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(acceptButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        parent.serverInfo.setText((String) servers.getSelectedValue());
        pinger.stop = true;
        pinger.ds.close();
        dispose();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ServerList dialog = new ServerList(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList servers;
    // End of variables declaration//GEN-END:variables



    private class Pinger extends Thread{
        DatagramSocket ds;
        int portToPing;
        ArrayList<IpAndPort> addressList;
        boolean stop;
        private class IpAndPort{
            InetAddress ip;
            int port;
        }
        
        /**
         * 
         * @param port Port on which to listen for pings
         */
        public Pinger(int pingPort) throws SocketException {
            stop = false;
            ds = new DatagramSocket();
            portToPing = pingPort;
            addressList = new ArrayList<>();
        }
        
        @Override
        public void run(){
            try {
                ds.setBroadcast(true);
            } catch (SocketException ex) {
                Logger.getLogger(SoundWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            byte[] buffer = new byte[100];
            buffer = "voicechat".getBytes();
            ByteBuffer broadcastAddress = ByteBuffer.allocate(4);
            broadcastAddress.putInt(0, 0xFFFFFFFF);
            DatagramPacket dp;
            try {
                dp = new DatagramPacket(buffer, buffer.length, InetAddress.getByAddress(broadcastAddress.array()), portToPing);
            } catch (UnknownHostException ex) {
                System.out.println("Could not create packet");
                Logger.getLogger(ServerList.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            try {
                ds.send(dp);
            } catch (IOException ex) {
                Logger.getLogger(SoundWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            while(!stop)
            {
                byte[] buf2 = new byte[100];
                dp = new DatagramPacket(buf2, buf2.length);
                try {
                    ds.receive(dp);
                    IpAndPort i = new IpAndPort();
                    i.port = ByteBuffer.wrap(dp.getData()).order(ByteOrder.LITTLE_ENDIAN).getInt(0);
                    i.ip = dp.getAddress();
                    addressList.add(i);
                    if(servers != null)
                        servers.updateUI();
                } catch (IOException ex) {
                    System.out.println("error receiving or sending ping");
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

}
