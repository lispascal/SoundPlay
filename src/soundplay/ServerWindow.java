/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package soundplay;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Pascal Lis
 */
public class ServerWindow extends javax.swing.JFrame implements AutoCloseable {

    /**
     * Creates new form serverWindow2
     */
    
    ConnAcceptor connAcceptor;
    PingResponder pingResponder;
    SoundWindow parent;
    final private int PING_PORT = 3001;
    final private String SERVER_NAME = "SERVER";
    public ServerWindow(SoundWindow parentRef) {
        parent = parentRef;
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                close();
            }
        });
        int port = 3000;
        listenForPings(port, PING_PORT);
        listenForConnections(port);
        initComponents();
    }

    private ServerWindow() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        onlineList = new javax.swing.JList();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        onlineList.setModel(new javax.swing.AbstractListModel() {
            //    String[] strings = {};
            public int getSize() { return connAcceptor.getConnStrings().size(); }
            public String getElementAt(int i) { return connAcceptor.getConnStrings().get(i); }
        });
        jScrollPane1.setViewportView(onlineList);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exitButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(exitButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        close();
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    synchronized void refreshOnlineList() {
        connAcceptor.regenConnStrings();
        for(ChatConnection eachConn : connAcceptor.getConnList())
            eachConn.serveList(false);
            
        onlineList.updateUI();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList onlineList;
    // End of variables declaration//GEN-END:variables

    private void closeConnections() {
        connAcceptor.stop = true;
        try {
            connAcceptor.s.close();
        } catch (IOException ex) {
            System.out.println("Exception occurred while closing server socket");
            Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        pingResponder.stop = true;
        pingResponder.ds.close();
        pingResponder.ds.disconnect();
        
    }

    
    /**
     * This method creates a new thread which will listen for incoming 
     * connections, then dispatch those connections to a new thread.
     * 
     */
    private void listenForConnections(int port) {
        connAcceptor = new ConnAcceptor(port, this);
        connAcceptor.start();
    }

    private void listenForPings(int port, int pingPort) {
        try {
            pingResponder = new PingResponder(port, pingPort);
            pingResponder.start();
        } catch (SocketException ex) {
            System.out.println("Could not open ping listener");
            Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
    }

    @Override
    public void close() {
        closeConnections();
        parent.server = null;
    }

    private static class PingResponder extends Thread {
        volatile DatagramSocket ds;
        int serverPort;
        volatile boolean stop;
        /**
         * 
         * @param port Port on which to listen for pings
         */
        public PingResponder(int port, int pingPort) throws SocketException {
            stop = false;
            ds = new DatagramSocket(pingPort);
            ds.setBroadcast(true);
            ds.setSoTimeout(2000);
            serverPort = port;
        }
        
        @Override
        public void run(){
            while(!stop)
            {
                byte[] buffer = new byte[100];
                DatagramPacket dp = new DatagramPacket(buffer, buffer.length);
                try {
                    ds.receive(dp);
                    ByteBuffer.wrap(buffer).order(ByteOrder.LITTLE_ENDIAN).putInt(0, serverPort);
                    ds.send(new DatagramPacket(buffer, 4, dp.getAddress(), dp.getPort()));
                } catch (SocketTimeoutException ex) {
                } catch (IOException ex) {
                    System.out.println("error receiving or sending ping, or socket closed");
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
        
    }

    private class ConnAcceptor extends Thread {
        int p;
        volatile boolean stop;
        volatile ArrayList<ChatConnection> conns = new ArrayList<>();
        volatile ServerSocket s;
        ArrayList<String> connStrings = new ArrayList<>();
        ServerWindow parent;
        
        public ConnAcceptor(int port, ServerWindow par) {
            p = port;
            parent = par;
        }
        
        synchronized private ArrayList<String> getConnStrings() {
            return connStrings;
        }
        
        synchronized private void addToConns(ChatConnection newConn) {
            conns.add(newConn);
        }
        synchronized private void removeFromConns(ChatConnection conn) {
            conns.remove(conn);
        }
        
        synchronized private void regenConnStrings() {
            connStrings.clear();
            for(ChatConnection i : conns)
                connStrings.add(i.getConnName() + "="
                + i.conn.getInetAddress().getHostAddress() + ":"
                + i.conn.getPort());
        }

        @Override
        public void run() {
            try { 
                 s = new ServerSocket(p);
            } catch (IOException ex) {
                System.out.println("Could not open socket at port " + p);
                Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            while(!stop)
            {
                try {
                    Socket newConn = s.accept();
                    System.out.println("new client at: " + newConn.getInetAddress() + ":" + newConn.getPort());
                    ChatConnection chatConn = new ChatConnection(newConn, this);
                    addToConns(chatConn);
                    parent.refreshOnlineList();
                    chatConn.start();
                } catch (IOException ex) {
                    System.out.println("Socket to accept connections closed or error occurred");
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            for(ChatConnection i : conns)
            {
                try {
                    i.close();
                } catch (IOException ex) {
                    System.out.println("Closing a socket failed");
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        Iterable<ChatConnection> getConnList() {
            return conns;
        }
    }

//    static int pcktnum;
    
    private class ChatConnection extends Thread {
        volatile Socket conn;
        ConnAcceptor parent;
        volatile InputStream in;
        volatile OutputStream out;
        volatile ObjectOutputStream oos;
        volatile ObjectInputStream ois;
        volatile String name;
        volatile boolean stop;
        
        public ChatConnection(Socket givenConn, ConnAcceptor parentRef) throws IOException {
            name = "anon";
            conn = givenConn;
            parent = parentRef;
            in = conn.getInputStream();
            out = conn.getOutputStream();
            oos = new ObjectOutputStream(out);
            ois = new ObjectInputStream(in);
        }
        
        synchronized void writeMessage(Message msg) throws IOException{
            oos.writeObject(msg);
        }

        synchronized String getConnName() {
            return name;
        }
        
        synchronized void setConnName(String inName) {
            name = inName;
        }
        
        void changeName(String newName) throws IOException {
            if(newName == null)
                newName = "guest";
            if(newName.contains(",")) // sanitize name
                newName = newName.substring(0, newName.indexOf(','));
            if(newName.length() == 0)
                newName = "guest";
            
            setConnName(newName);
            parent.regenConnStrings();
            parent.parent.refreshOnlineList();
            Message m = new Message(SERVER_NAME, "/name:" + newName);
            writeMessage(m);
        }
        
        void close() throws IOException {
            stop = true;
            conn.close();
        }
        
        @Override
        public void run() {
            while(!stop)
            { 
                try {
                    if(conn.isClosed())
                        System.out.println("closed serverside socket");

                    Message m ;
                    m = (Message) ois.readObject();
                    if(m.msg != null && m.msg.startsWith("/")) // if user is attempting a command
                    {
                        if(m.msg.startsWith("/nick "))
                            changeName(m.msg.substring("/nick ".length())); // whole string after "/nick "
                        else if(m.msg.startsWith("/name "))
                            changeName(m.msg.substring("/name ".length())); // whole string after "/name "
                        else if(m.msg.contentEquals("/list") || m.msg.contentEquals("/who"))
                            serveList(true);
                        else
                            writeMessage(new Message(SERVER_NAME, "command does not exist"));
                    }
                    else // if literally anything else. Voice or text messages, but no commands
                    {
                        m.name = getConnName();
                        for (ChatConnection eachConn : parent.getConnList()) {
                            if (eachConn != this) {
                                eachConn.writeMessage(m);
                            }
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                    break;
                } catch ( IOException ex ){
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("removing " + name + " from connection list");
                    parent.removeFromConns(this);
                    parent.parent.refreshOnlineList();
                    break;
                }
            }
        }

        private void serveList(boolean requested) {
            try{
                StringBuilder s = new StringBuilder();
                s.append("/list:");
                if(!requested)
                    s.append(","); // tells client to hide the message
                for(String i : parent.getConnStrings())
                    s.append(i.substring(0, i.lastIndexOf('='))).append(",");
                Message m = new Message(SERVER_NAME, s.toString());
                writeMessage(m);
            } catch ( IOException ex ){
                Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("removing " + name + " from connection list");
                parent.removeFromConns(this);
                parent.parent.refreshOnlineList();
            }
        }
    }
}
