/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package soundplay;


import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Pascal Lis
 */
public class ClientWindow extends javax.swing.JFrame implements AutoCloseable{
    SoundWindow sw;
    Socket sock;
    volatile InputStream in;
    volatile OutputStream out;
    public Receiver recv;
    String clientName;
    
    private DummySpeaker dummySpeaker;
    private Thread dst;
    private Socket sock2;
    ArrayList<String> names;
    final private String SERVER_NAME = "SERVER";
    
    /**
     * Creates new form ClientWindow
     */
    public ClientWindow() {
        initComponents();
    }

    public ClientWindow(SoundWindow soundWindow, String name, int port, InetAddress serverIP, int serverPort) {
        names = new ArrayList<>();
        sw = soundWindow;
        initComponents();
//        nameField.setText(name);
        if(!connectToServer(port, serverIP, serverPort, name))
            close(); // close out of window if it couldn't connect successfully
        messageBox.addKeyListener(new KeyAdapter(){
            public void keyPressed(KeyEvent e) {
                //System.out.println("keypress found: " + e.getKeyCode());
                if(e.getKeyCode() == KeyEvent.VK_ENTER)
                    sendMessage();
                if(e.getKeyCode() == sw.pttKey)
                    sw.ptt = true;
            }
            public void keyReleased(KeyEvent e) {
                //System.out.println("keypress found: " + e.getKeyCode());
                if(e.getKeyCode() == KeyEvent.VK_ENTER)
                    sendMessage();
                if(e.getKeyCode() == sw.pttKey)
                    sw.ptt = false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        userLabel = new javax.swing.JLabel();
        messageBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setLineWrap(true);
        chatArea.setRows(5);
        chatArea.setWrapStyleWord(true);
        chatArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                chatAreaCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(chatArea);
        ((DefaultCaret)chatArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        userList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return names.size(); }
            public Object getElementAt(int i) { return names.get(i); }
        });
        jScrollPane2.setViewportView(userList);

        userLabel.setText("Users (unfunctional)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageBox)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chatAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_chatAreaCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_chatAreaCaretUpdate

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        close();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JTextArea chatArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField messageBox;
    private javax.swing.JLabel userLabel;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

    
    private boolean connectToServer(int port, InetAddress serverIP, int serverPort, String nameDesired) {
        try {
//            System.out.println(InetAddress.getLocalHost());
            System.out.println("Creating client side socket for:" + serverIP + ":" + serverPort);
            
            sock = new Socket(serverIP, serverPort, InetAddress.getLocalHost(), port);
            
            System.out.println("Socket on client side created");
            in = sock.getInputStream();
            out = sock.getOutputStream();
            recv = new Receiver(this);
            recv.start();
            sw.getPubSpkr(out);
            
            sendMessage("/name " + nameDesired);
            sendMessage("/list");
//            sock2 = new Socket(serverIP, serverPort);
//            InputStream in2 = sock2.getInputStream();
//            OutputStream out2 = sock2.getOutputStream();
//            dummySpeaker = new DummySpeaker(in2, out2, "c", 1000, 261.63);
//            dst = new Thread(dummySpeaker);
//            dst.start();
            
//            Socket sock3 = new Socket(serverIP, serverPort);
//            InputStream in3 = sock3.getInputStream();
//            OutputStream out3 = sock3.getOutputStream();
//            dummySpeaker = new DummySpeaker(in3, out3, "d", 1000, 523.26);
//            new Thread(dummySpeaker).start();
            
//            Socket sock3 = new Socket(serverIP, serverPort, InetAddress.getLocalHost(), port+2);
//            InputStream in3 = sock2.getInputStream();
//            OutputStream out3 = sock2.getOutputStream();
//            Thread a3 = new Thread(new DummySpeaker(in3, out3, "d", 1000, 612));
//            a3.start();
            
        } catch (IOException | LineUnavailableException | InterruptedException ex) {
            System.out.println("error connecting to server");
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);   
            return false;
        }
        return true;
    }
    
    
    private void sendMessage() {
        if(messageBox.getText().equals(""))
            return;
        sendMessage(messageBox.getText());
        
        chatArea.append(clientName + ": " + messageBox.getText() + "\n");
        messageBox.setText("");
    }
    
    private void sendMessage(String text) {
        if(text.equals(""))
            return;
        Message msg = new Message(text);
        try {
            ((SoundWindow.PublicSpeaker) sw.chatter).sendObject(msg);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Closes all dependent windows.
     */
    @Override
    public void close() {
//        try {
            recv.stop = true; // stop receiving
        try {
            recv.ois.close();
        } catch (IOException ex) {
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
//            recv.join();
            sw.stopPubSpkr(); // stop sending and close interface to receive.
//        } catch (InterruptedException ex) {
//            System.out.println("failed at closing ClientWindow");
//            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
        try {
            sock.close(); // close socket sending data to client's publicspeaker
        } catch (IOException ex) {
            System.out.println("could not close client publicspeaker socket");
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        sw.client = null;
//        dummySpeaker.close();
//        dummySpeaker = null;
        
    }

    private void setList(String list) { // format of list is name,name2,name3, etc
        int start = 0;
        names.clear();
        while(list.indexOf(',', start) != -1)
        {
            int commaIndex = list.indexOf(',', start);
            names.add(list.substring(start,commaIndex));
            start = commaIndex + 1;
        }
        chatArea.append("Online users: " + list.substring(0, list.length()-1) + "\n");
        userList.updateUI();
    }

    private void setClientName(String newName) {
        chatArea.append("Name set to: " + newName + "\n");
        clientName = newName;
    }
    
//    static int numSounds = 0;
//    static int zsdf2;
    private class Receiver extends Thread{
        boolean stop = false;
        MixerPlayer mP;
        ObjectInputStream ois;
        ClientWindow parent;
        
        private Receiver(ClientWindow par) {
            parent = par;
        }
        
        @Override
        public void run(){
            SoundMixer sMixer = new SoundMixer();    
            mP = new MixerPlayer(sMixer, sw);
            new Thread(mP).start();
            
            try {
                ois = new ObjectInputStream(in);
            } catch (IOException ex) {
                Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }

            while(!stop)
            {
                //System.out.println("hi");

                
                try {
                    Message m;
                    m = (Message)ois.readObject();
                    
                    if(m.msg != null) // text based message
                    {
                        if(m.msg.startsWith("/list:") && m.name.equals(SERVER_NAME))
                            parent.setList(m.msg.substring("/list:".length()));
                        else if(m.msg.startsWith("/name:") && m.name.equals(SERVER_NAME))
                            parent.setClientName(m.msg.substring("/name:".length()));
                        else
                        {
                            chatArea.append(m.name + ": " + m.msg + "\n");
                            if(chatArea.getLineCount() > 20)
                                try {
                                    chatArea.replaceRange(null, 0, chatArea.getLineEndOffset(0));
                            } catch (BadLocationException ex) {
                                System.out.println("Could not clear old chatArea lines.");
                                Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    else if(m.byteArray != null) // data based, or sound message
                    {
                        sMixer.addSound(m);
                    }
                    else
                    {
                        System.out.println(m.toReadableString());
                    }
                } catch (        IOException | ClassNotFoundException ex) {
                    Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }
    }
    
    private class MixerPlayer implements Runnable{

        volatile SoundMixer sM;
        SoundWindow sw;
        volatile boolean stop = false;
        private MixerPlayer(SoundMixer sMixer, SoundWindow sWindow) {
            sM = sMixer;
            sw = sWindow;
        }
        
        
        
        @Override
        public void run() {
            while(!stop)
            {
                if(sM.available())
                {
                    sw.chatter.playSound(sM.getMixedSounds());
                }
            }
            
        }
        
    }
    
    
    
}
